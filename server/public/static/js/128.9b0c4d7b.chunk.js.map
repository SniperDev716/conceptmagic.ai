{"version":3,"file":"static/js/128.9b0c4d7b.chunk.js","mappings":"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","sources":["container/pages/Home/Partials/SelectedImage.js","container/pages/Home/Upload.jsx","services/v1API.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Checkmark = ({ selected }) => (\r\n  <div\r\n    style={\r\n      selected\r\n        ? { left: \"4px\", top: \"4px\", position: \"absolute\", zIndex: \"1\" }\r\n        : { display: \"none\" }\r\n    }\r\n  >\r\n    <svg\r\n      style={{ fill: \"white\", position: \"absolute\" }}\r\n      width=\"24px\"\r\n      height=\"24px\"\r\n    >\r\n      <circle cx=\"12.5\" cy=\"12.2\" r=\"8.292\" />\r\n    </svg>\r\n    <svg\r\n      style={{ fill: \"#06befa\", position: \"absolute\" }}\r\n      width=\"24px\"\r\n      height=\"24px\"\r\n    >\r\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\r\n    </svg>\r\n  </div>\r\n);\r\n\r\nconst imgStyle = {\r\n  transition: \"transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s\"\r\n};\r\nconst selectedImgStyle = {\r\n  transform: \"translateZ(0px) scale3d(0.9, 0.9, 1)\",\r\n  transition: \"transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s\"\r\n};\r\nconst cont = {\r\n  backgroundColor: \"#eee\",\r\n  cursor: \"pointer\",\r\n  overflow: \"hidden\",\r\n  position: \"relative\"\r\n};\r\n\r\nconst SelectedImage = ({\r\n  index,\r\n  photo,\r\n  margin,\r\n  direction,\r\n  top,\r\n  left,\r\n  selected,\r\n  onClick,\r\n}) => {\r\n  const [isSelected, setIsSelected] = useState(selected == index);\r\n  //calculate x,y scale\r\n  const sx = (100 - (30 / photo.width) * 100) / 100;\r\n  const sy = (100 - (30 / photo.height) * 100) / 100;\r\n  selectedImgStyle.transform = `translateZ(0px) scale3d(${sx}, ${sy}, 1)`;\r\n\r\n  if (direction === \"column\") {\r\n    cont.position = \"absolute\";\r\n    cont.left = left;\r\n    cont.top = top;\r\n  }\r\n\r\n  const handleOnClick = e => {\r\n    // setIsSelected();\r\n    onClick(index);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsSelected(selected == index);\r\n  }, [selected]);\r\n\r\n  return (\r\n    <div\r\n      style={{ margin, height: photo.height, width: photo.width, ...cont }}\r\n      className={!isSelected ? \"not-selected\" : \"\"}\r\n    >\r\n      <Checkmark selected={isSelected ? true : false} />\r\n      <img\r\n        alt={photo.title}\r\n        style={\r\n          isSelected ? { ...imgStyle, ...selectedImgStyle } : { ...imgStyle }\r\n        }\r\n        {...photo}\r\n        onClick={handleOnClick}\r\n      />\r\n      <style>{`.not-selected:hover{outline:2px solid #06befa}`}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectedImage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { Button, Col, Divider, Image, Input, Layout, Row, Skeleton, Spin, Typography, Upload, message } from \"antd\";\r\nimport { FileImageOutlined, SelectOutlined, UploadOutlined } from \"@ant-design/icons\";\r\nimport Gallery from \"react-photo-gallery\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport $ from \"jquery\";\r\n\r\nimport constants from \"../../../config/constants\";\r\nimport { getStorage } from \"../../../helpers\";\r\nimport { getPlan } from \"../../../redux/auth/authSlice\";\r\nimport { deleteFile, getImageDescription, getImagesfromPin } from \"../../../services/v1API\";\r\nimport SelectedImage from \"./Partials/SelectedImage\";\r\n\r\nconst { Content, Sider } = Layout;\r\nconst { Title, Text } = Typography;\r\nconst { Dragger } = Upload;\r\n\r\nfunction UploadContainer() {\r\n  // const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  // const plan = useSelector((state) => state.auth.plan);\r\n  // const { id } = useParams();\r\n\r\n  // const [percent, setPercent] = useState(0);\r\n  const [search, setSearch] = useState(getStorage(\"image_type\") || \"Product Renderings\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingMore, setLoadingMore] = useState(false);\r\n  const [pinLoading, setPinLoading] = useState(false);\r\n  const [fileLists, setFileLists] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [path, setPath] = useState(\"\");\r\n  const [pinImages, setPinImages] = useState([]);\r\n  const [setting, setSetting] = useState({});\r\n  const [selected, setSelected] = useState(-1);\r\n\r\n  const getPinImages = (flag = false) => {\r\n    let data = { query: search };\r\n    if (!flag) {\r\n      data = { ...data, ...setting };\r\n      setLoadingMore(true);\r\n    } else {\r\n      $(\"#imagelistview .infinite-scroll-component\").scrollTop(0);\r\n      setPinLoading(true);\r\n    }\r\n    getImagesfromPin(data).then(res => {\r\n      // console.log(res.data);\r\n      if (flag) {\r\n        setPinImages(res.data.images);\r\n      } else {\r\n        setPinImages([...pinImages, ...res.data.images]);\r\n      }\r\n      setSetting({\r\n        bookmarks: res.data.bookmarks,\r\n        token: res.data.token,\r\n        cookie: res.data.cookie,\r\n      });\r\n      // console.log(res.data.bookmarks);\r\n    }).catch(err => {\r\n      console.log(err);\r\n    }).finally(() => {\r\n      setPinLoading(false);\r\n      setLoadingMore(false);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // dispatch(getPlan());\r\n    getPinImages(true);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   // setSetting({});\r\n  // }, [search]);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   // console.log(id, plan);\r\n  //   // if(!plan && !id) {\r\n  //   //     navigate('/plans');\r\n  //   // }\r\n  // }, [plan]);\r\n\r\n  const handleSearch = () => {\r\n    getPinImages(true);\r\n  }\r\n\r\n  const handleChange = (info) => {\r\n    if (info.file.status === \"done\") {\r\n      setPath(info.file.response?.path);\r\n      info.file.thumbUrl = `${constants.SOCKET_URL}${info.file.response?.path}`;\r\n    }\r\n    setFileLists(info.fileList.length == 1 ? info.fileList : info.fileList.splice(1, 1));\r\n    setSelected(-1);\r\n  };\r\n\r\n  const handleDelete = (file) => {\r\n    deleteFile({\r\n      path: file.response?.path,\r\n    }).then((res) => {\r\n      console.log(res);\r\n    }).catch((err) => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  const handleNext = async () => {\r\n    if (loading) return;\r\n    if (!name) return message.warning('Please input name your project!');\r\n    let data = fileLists.filter(file => file.status == 'done').map(file => file.response?.path);\r\n    if (data.length == 0 && selected == -1) return message.warning(\"Please choose your inspiration image\");\r\n    setLoading(true);\r\n    try {\r\n      let res = await getImageDescription({\r\n        fileLists: selected == -1 ? data : [pinImages[selected].src],\r\n        name\r\n      });\r\n      // console.log(res);\r\n      navigate(`/result/${res.data.id}`);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"text-center max-w-5xl w-screen mx-auto px-6 md:px-2 p-2\">\r\n      <Row gutter={[24, 24]} className=\"mt-6\">\r\n        <Col span={24}>\r\n          <Title level={3}>Select an image that you'd like to use as a starting point.</Title>\r\n        </Col>\r\n        <Col span={24} className=\"relative\">\r\n          <div className=\"max-w-xl absolute z-50 right-10 top-5\">\r\n            <Input.Search size=\"large\" className=\"[&_input]:opacity-70 [&_input:hover]:opacity-100 [&_input:focus]:opacity-100\" onSearch={() => handleSearch()} loading={pinLoading} value={search} onChange={(e) => setSearch(e.target.value)} />\r\n          </div>\r\n          <div id=\"imagelistview\" className=\"max-h-[calc(100vh_-_425px)] overflow-y-auto overflow-x-hidden border-4 border-solid border-blue-400 rounded-lg\">\r\n            {/* <Row gutter={[32, 32]}>\r\n              {pinImages.map((image, index) => <Col span={6}>\r\n                <Image src={image} alt=\"pin\" />\r\n              </Col>)}\r\n            </Row> */}\r\n            {/* {pinImages.map((image, index) => <img key={index} src={image} alt={'pin'} className=\"w-1/4\"/>)} */}\r\n            <InfiniteScroll\r\n              dataLength={pinImages.length}\r\n              next={() => { getPinImages() }}\r\n              hasMore={true}\r\n              scrollableTarget=\"imagelistview\"\r\n              height=\"calc(100vh - 440px)\"\r\n              loader={\r\n                <div className=\"mt-2 flex\">\r\n                  <div className=\"w-1/4 p-1\">\r\n                    <Skeleton.Image\r\n                      className=\"!w-full\"\r\n                      key={Date.now()}\r\n                      active\r\n                      loading={loadingMore}\r\n                    />\r\n                  </div>\r\n                  <div className=\"w-1/4 p-1\">\r\n                    <Skeleton.Image\r\n                      className=\"!w-full\"\r\n                      key={Date.now()}\r\n                      active\r\n                      loading={loadingMore}\r\n                    />\r\n                  </div>\r\n                  <div className=\"w-1/4 p-1\">\r\n                    <Skeleton.Image\r\n                      className=\"!w-full\"\r\n                      key={Date.now()}\r\n                      active\r\n                      loading={loadingMore}\r\n                    />\r\n                  </div>\r\n                  <div className=\"w-1/4 p-1\">\r\n                    <Skeleton.Image\r\n                      className=\"!w-full\"\r\n                      key={Date.now()}\r\n                      active\r\n                      loading={loadingMore}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              }\r\n              // endMessage={<Divider plain>It is all, nothing more 🤐</Divider>}\r\n              scrollThreshold={1}\r\n            // useWindow={false}\r\n            >\r\n              {pinImages.length > 0 && <Gallery photos={pinImages} direction=\"column\" columns={4} onClick={(e) => {\r\n                console.log(e.target, arguments);\r\n              }}\r\n                renderImage={({ index, left, top, key, photo }) => {\r\n                  return (\r\n                    <SelectedImage\r\n                      selected={selected}\r\n                      key={key}\r\n                      margin={\"2px\"}\r\n                      direction=\"column\"\r\n                      index={index}\r\n                      photo={photo}\r\n                      left={left}\r\n                      top={top}\r\n                      onClick={(pos) => {\r\n                        setSelected(pos);\r\n                        setFileLists([]);\r\n                      }}\r\n                    />\r\n                  )\r\n                }}\r\n              />}\r\n            </InfiniteScroll>\r\n          </div>\r\n        </Col>\r\n        <Divider className=\"!m-0\">Or</Divider>\r\n        <Col span={24}>\r\n          <Upload\r\n            name=\"file\"\r\n            multiple={false}\r\n            fileList={fileLists}\r\n            action={`${constants.HOST_URL}v1/upload`}\r\n            showUploadList={true}\r\n            listType=\"picture\"\r\n            accept=\"image/*\"\r\n            headers={{\r\n              Authorization: getStorage(\"token\"),\r\n            }}\r\n            data={{\r\n              oldFile: path,\r\n            }}\r\n            onChange={handleChange}\r\n            onRemove={handleDelete}>\r\n            <Button className=\"\" size=\"large\" icon={<UploadOutlined />}>Choose from your computer</Button>\r\n          </Upload>\r\n        </Col>\r\n        <Col span={24}>\r\n          <Input\r\n            type=\"text\"\r\n            className=\"text-center\"\r\n            size=\"large\"\r\n            placeholder=\"Name Your Project...\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </Col>\r\n        {/* <Col span={24}>\r\n        </Col> */}\r\n        {/* {path && <Col span={12}>\r\n          <Image src={`${constants.SOCKET_URL}${path}`} width={'100%'} />\r\n        </Col>} */}\r\n        <Col span={24}>\r\n          <div className=\"text-center\">\r\n            <Button type=\"primary\" size=\"large\" onClick={handleNext} loading={loading}>Next step</Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadContainer;\r\n","import { getRequest, postRequest } from \"./axiosClient\";\r\n\r\nexport const getImageDescription = (data) => postRequest('v1/getImageDescription', data);\r\nexport const deleteFile = (data) => postRequest('v1/deleteFile', data);\r\nexport const getConceptById = (id, data) => getRequest(`v1/getConceptById/${id}`, data);\r\nexport const generateImage = (id, data) => postRequest(`v1/generateImage/${id}`, data);\r\nexport const getProjects = (data) => getRequest(`v1/getProjects`, data);\r\nexport const getImagesfromPin = (data) => postRequest(`v1/getImagesfromPin`, data);"],"names":["Checkmark","_ref","selected","_jsxs","style","left","top","position","zIndex","display","children","_jsx","fill","width","height","cx","cy","r","d","imgStyle","transition","selectedImgStyle","transform","cont","backgroundColor","cursor","overflow","_ref2","index","photo","margin","direction","onClick","isSelected","setIsSelected","useState","sx","sy","concat","useEffect","className","alt","title","e","Content","Sider","Layout","Title","Text","Typography","Dragger","Upload","navigate","useNavigate","search","setSearch","getStorage","loading","setLoading","loadingMore","setLoadingMore","pinLoading","setPinLoading","fileLists","setFileLists","name","setName","path","setPath","pinImages","setPinImages","setting","setSetting","setSelected","getPinImages","flag","arguments","length","undefined","data","query","$","scrollTop","getImagesfromPin","then","res","images","bookmarks","token","cookie","catch","err","console","log","finally","Row","gutter","Col","span","level","Input","size","onSearch","value","onChange","target","id","InfiniteScroll","dataLength","next","hasMore","scrollableTarget","loader","Skeleton","active","Date","now","scrollThreshold","Gallery","photos","columns","renderImage","key","SelectedImage","pos","Divider","multiple","fileList","action","constants","showUploadList","listType","accept","headers","Authorization","oldFile","info","_info$file$response","_info$file$response2","file","status","response","thumbUrl","splice","onRemove","_file$response","deleteFile","Button","icon","UploadOutlined","type","placeholder","async","message","filter","map","_file$response2","getImageDescription","src","error","postRequest","getConceptById","getRequest","generateImage","getProjects"],"sourceRoot":""}