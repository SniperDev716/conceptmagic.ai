{"version":3,"file":"static/js/682.e294d9e1.chunk.js","mappings":"iTAaA,MAAM,QAAEA,EAAO,MAAEC,GAAUC,EAAAA,SACrB,MAAEC,EAAK,KAAEC,GAASC,EAAAA,SAClB,QAAEC,GAAYC,EAAAA,QAQdC,EAAa,CALV,IAEA,GADA,IAyJT,QAnJA,WAAwB,IAADC,EAAAC,EAErB,MAAMC,GAAWC,EAAAA,EAAAA,OAEX,GAAEC,IAAOC,EAAAA,EAAAA,OAERC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,CAAC,IACjCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAWC,IAAgBN,EAAAA,EAAAA,UAAS,CAAC,IAE5CO,EAAAA,EAAAA,YAAU,MACRC,EAAAA,EAAAA,IAAeZ,GAAIa,MAAKC,IACtBX,EAAWW,EAAIC,KAAKb,QAAQ,IAC3Bc,OAAMC,IACPC,QAAQC,IAAIF,EAAI,GAChB,GACD,IA6CH,MAIMG,EAAiBC,IACrBb,EAAY,IAAID,EAAUc,GAAS,EA8BrC,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,6CAA4CC,UACzDC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,OAAQ,CAAC,GAAI,IAAKJ,UAAU,OAAMC,SAAA,EACrCF,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACC,KAAM,GAAGL,UACZC,EAAAA,EAAAA,MAACnC,EAAK,CAACwC,MAAO,EAAEN,SAAA,CAAC,aAASC,EAAAA,EAAAA,MAAA,QAAMF,UAAU,wBAAuBC,SAAA,CAAC,UAAMF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,6CAA4CC,UAACF,EAAAA,EAAAA,KAACS,EAAAA,EAAkB,CAACC,aAAa,aAAsB,kEAE9LV,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACC,KAAM,GAAGL,UAKZF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8DAA6DC,UAC1EF,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CACRC,KAAM3B,EACN4B,YAAaC,IAAAA,KAA0B,QAApBxC,EAACM,EAAQmC,mBAAW,IAAAzC,OAAA,EAAnBA,EAAqB0C,KAAKC,GAASA,EAAKC,OAAMC,KAAK,KAAKC,MAAM,MAAMC,QAAOC,GAAOA,EAAIC,OAAS,IAAGP,KAAIM,IAAG,CAAO5C,GAAI4C,EAAKE,KAAMF,MACnJjD,WAAYA,EACZoD,aAnDSC,IACnBxC,EAAYD,EAASoC,QAAO,CAACtB,EAAS4B,IAAUA,IAAUD,IAAG,EAmDnD5B,eAAgBA,EAChB8B,WA7COA,CAAC7B,EAAS8B,EAASC,KACpC,MAAMC,EAAc9C,EAAS+C,QAE7BD,EAAYE,OAAOJ,EAAS,GAC5BE,EAAYE,OAAOH,EAAQ,EAAG/B,GAG9Bb,EAAY6C,EAAY,EAwCdG,YAAY,sBACZC,mBAAmB,eAKL,QADd5D,EACLK,EAAQmC,mBAAW,IAAAxC,OAAA,EAAnBA,EAAqByC,KAAI,CAACvB,EAAMkC,KAAUxB,EAAAA,EAAAA,MAACiC,EAAAA,SAAQ,CAAAlC,SAAA,EAClDF,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACC,KAAM,EAAEL,UACXF,EAAAA,EAAAA,KAACqC,EAAAA,EAAK,CAACC,IAAG,GAAAC,OAAKC,EAAAA,EAAAA,YAAoBD,OAAG9C,EAAKgD,MAAQC,MAAO,YAE5D1C,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACC,KAAM,GAAGL,UACZF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gCAA+BC,SACzCT,EAAKyB,KAAKE,MAAM,KAAKJ,KAAI,CAAC2B,EAAMC,KAAW5C,EAAAA,EAAAA,KAAA,QAAMC,UAAU,6DAA6F4C,QAASA,IAAM/C,EAAe6C,GAAqBzC,SAAEyC,GAAI,QAAAJ,OAA5EZ,EAAK,KAAAY,OAAIK,YAN3FjB,MAc1D3B,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACC,KAAM,GAAGL,UACZF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAAC8C,EAAAA,GAAM,CAACC,KAAK,UAAUC,KAAK,QAAQH,QA3D3BI,UACjBjE,GAAW,GACX,IAKE,IAAIQ,QAAY0D,EAAAA,EAAAA,IAAcxE,EAAI,CAAEO,SAAUA,EAAS+B,KAAIjB,GAAWA,EAAQyB,OAAML,KAAK,OACzFvB,QAAQC,IAAIL,GACZhB,EAAS,WAAD+D,OAAY7D,GACtB,CAAE,MAAOyE,GACPvD,QAAQC,IAAIsD,EACd,CACAnE,GAAW,EAAM,EA8CgDD,QAASA,EAAQmB,SAAC,sBAMvF,C,8FCxKO,MAAMkD,EAAuB3D,IAAS4D,EAAAA,EAAAA,IAAY,yBAA0B5D,GACtE6D,EAAc7D,IAAS4D,EAAAA,EAAAA,IAAY,gBAAiB5D,GACpDH,EAAiBA,CAACZ,EAAIe,KAAS8D,EAAAA,EAAAA,IAAW,qBAADhB,OAAsB7D,GAAMe,GACrEyD,EAAgBA,CAACxE,EAAIe,KAAS4D,EAAAA,EAAAA,IAAY,oBAADd,OAAqB7D,GAAMe,GACpE+D,EAAcA,CAAC9E,EAAIe,KAAS8D,EAAAA,EAAAA,IAAW,kBAADhB,OAAmB7D,GAAM,IAAMe,GACrEgE,EAAoBhE,IAAS4D,EAAAA,EAAAA,IAAY,sBAAuB5D,E","sources":["container/pages/Home/Description.jsx","services/v1API.js"],"sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport _ from \"lodash\";\r\nimport { Button, Col, Image, Layout, Row, Spin, Tag, Typography, Upload } from \"antd\";\r\nimport { CloseCircleTwoTone, FileImageOutlined } from \"@ant-design/icons\";\r\nimport { WithContext as ReactTags } from 'react-tag-input';\r\n\r\nimport { getPlan } from \"../../../redux/auth/authSlice\";\r\nimport constants from \"../../../config/constants\";\r\nimport { getStorage } from \"../../../helpers\";\r\nimport { generateImage, getConceptById, getImageDescription } from \"../../../services/v1API\";\r\n\r\nconst { Content, Sider } = Layout;\r\nconst { Title, Text } = Typography;\r\nconst { Dragger } = Upload;\r\n\r\nconst KeyCodes = {\r\n  comma: 188,\r\n  space: 32,\r\n  enter: 13\r\n};\r\n\r\nconst delimiters = [KeyCodes.comma, KeyCodes.enter, KeyCodes.space];\r\n\r\nfunction Description() {\r\n  // const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  // const plan = useSelector((state) => state.auth.plan);\r\n  const { id } = useParams();\r\n\r\n  const [concept, setConcept] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [keywords, setKeywords] = useState([]);\r\n  const [prevIndex, setPrevIndex] = useState({});\r\n\r\n  useEffect(() => {\r\n    getConceptById(id).then(res => {\r\n      setConcept(res.data.concept);\r\n    }).catch(err => {\r\n      console.log(err);\r\n    });\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   // console.log(id, plan);\r\n  //   // if(!plan && !id) {\r\n  //   //     navigate('/plans');\r\n  //   // }\r\n  // }, [plan]);\r\n\r\n  // const handleChange = (info) => {\r\n  //   setPercent(parseInt(info.file.percent));\r\n  //   if (info.file.status === \"done\") {\r\n  //     setPath(info.file.response?.path);\r\n  //   }\r\n  // };\r\n\r\n  // const handleAdd = (word, index, index1) => {\r\n  //   let tmp = [...keywords];\r\n\r\n  //   if (prevIndex.index == index) {\r\n  //     if ((prevIndex.index1 - index1) == 1) {\r\n  //       let prevWord = tmp.splice(-1, 1);\r\n  //       let newWord = word + ' ' + prevWord;\r\n  //       tmp = [...tmp, newWord];\r\n  //     } else if ((prevIndex.index1 - index1) == -1) {\r\n  //       let prevWord = tmp.splice(-1, 1);\r\n  //       let newWord = prevWord + ' ' + word;\r\n  //       tmp = [...tmp, newWord];\r\n  //     } else if ((prevIndex.index1 - index1) == 0) {\r\n  //     } else {\r\n  //       tmp = [...tmp, word];\r\n  //     }\r\n  //   } else {\r\n  //     tmp = [...tmp, word];\r\n  //   }\r\n  //   setKeywords([...tmp]);\r\n  //   setPrevIndex({ index, index1 });\r\n  // }\r\n\r\n  // const handleDelete = (index) => {\r\n  //   let tmp = [...keywords];\r\n  //   tmp.splice(index, 1);\r\n  //   setKeywords([...tmp]);\r\n  // }\r\n\r\n  const handleRemove = i => {\r\n    setKeywords(keywords.filter((keyword, index) => index !== i));\r\n  };\r\n\r\n  const handleAddition = keyword => {\r\n    setKeywords([...keywords, keyword]);\r\n  };\r\n\r\n  const handleDrag = (keyword, currPos, newPos) => {\r\n    const newKeywords = keywords.slice();\r\n\r\n    newKeywords.splice(currPos, 1);\r\n    newKeywords.splice(newPos, 0, keyword);\r\n\r\n    // re-render\r\n    setKeywords(newKeywords);\r\n  };\r\n\r\n  const handleNext = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // let res = await getImageDescription({\r\n      //   path\r\n      // });\r\n      // console.log(res);\r\n      let res = await generateImage(id, { keywords: keywords.map(keyword => keyword.text).join(\" \") });\r\n      console.log(res);\r\n      navigate(`/result/${id}`);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"text-center max-w-7xl w-screen mx-auto p-2\">\r\n      <Row gutter={[32, 32]} className=\"mt-6\">\r\n        <Col span={24}>\r\n          <Title level={2}>Click to <span className=\"bg-green-200 relative\">select<span className=\"text-lg absolute top-[-15px] right-[-15px]\"><CloseCircleTwoTone twoToneColor=\"red\" /></span></span> the keywords that best describe what you want to create.</Title>\r\n        </Col>\r\n        <Col span={24}>\r\n          {/* <div className=\"border-1 border-solid border-gray-300 bg-gray-100 py-2 px-4 text-left\">\r\n            {(keywords.length == 0) && \"no selected keywords!\"}\r\n            {keywords.map((keyword, index) => <Tag className=\"my-1 relative group/item\" key={index}>{keyword} <span className=\"absolute -top-2 -right-2 cursor-pointer group-hover/item:inline hidden\" onClick={() => { handleDelete(index) }}><CloseCircleTwoTone twoToneColor=\"#F00\" /></span></Tag>)}\r\n          </div> */}\r\n          <div className=\"border-1 border-solid border-gray-200 rounded p-2 text-left\">\r\n            <ReactTags\r\n              tags={keywords}\r\n              suggestions={_.uniq(concept.inputImages?.map((item) => item.desc).join(\" \").split(\" \")).filter(txt => txt.length > 2).map(txt => ({ id: txt, text: txt }))}\r\n              delimiters={delimiters}\r\n              handleDelete={handleRemove}\r\n              handleAddition={handleAddition}\r\n              handleDrag={handleDrag}\r\n              // handleTagClick={handleTagClick}\r\n              placeholder=\"Please input prompt\"\r\n              inputFieldPosition=\"inline\"\r\n              // autocomplete\r\n            />\r\n          </div>\r\n        </Col>\r\n        {concept.inputImages?.map((data, index) => <Fragment key={index}>\r\n          <Col span={6}>\r\n            <Image src={`${constants.SOCKET_URL}${data.path}`} width={'100%'} />\r\n          </Col>\r\n          <Col span={18}>\r\n            <p className=\"break-words text-lg text-left\">\r\n              {data.desc.split(\" \").map((word, index1) => <span className=\"group/item mr-1 hover:bg-green-200 cursor-pointer relative\" key={`desc_${index}_${index1}`} onClick={() => handleAddition(word, index, index1)}>{word}\r\n                {/* <span className=\"absolute top-[-15px] right-[-15px] z-[-10] group-hover/item:z-auto\" onClick={() => {\r\n                  alert(\"Hello\")\r\n                }}><CloseCircleTwoTone twoToneColor=\"red\" /></span> */}\r\n              </span>)}\r\n            </p>\r\n          </Col>\r\n        </Fragment>)}\r\n        <Col span={24}>\r\n          <div className=\"text-center\">\r\n            <Button type=\"primary\" size=\"large\" onClick={handleNext} loading={loading}>Next step</Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Description;\r\n","import { getRequest, postRequest } from \"./axiosClient\";\r\n\r\nexport const getImageDescription = (data) => postRequest('v1/getImageDescription', data);\r\nexport const deleteFile = (data) => postRequest('v1/deleteFile', data);\r\nexport const getConceptById = (id, data) => getRequest(`v1/getConceptById/${id}`, data);\r\nexport const generateImage = (id, data) => postRequest(`v1/generateImage/${id}`, data);\r\nexport const getProjects = (id, data) => getRequest(`v1/getProjects/${id || \"\"}`, data);\r\nexport const getImagesfromPin = (data) => postRequest(`v1/getImagesfromPin`, data);"],"names":["Content","Sider","Layout","Title","Text","Typography","Dragger","Upload","delimiters","_concept$inputImages","_concept$inputImages2","navigate","useNavigate","id","useParams","concept","setConcept","useState","loading","setLoading","keywords","setKeywords","prevIndex","setPrevIndex","useEffect","getConceptById","then","res","data","catch","err","console","log","handleAddition","keyword","_jsx","className","children","_jsxs","Row","gutter","Col","span","level","CloseCircleTwoTone","twoToneColor","ReactTags","tags","suggestions","_","inputImages","map","item","desc","join","split","filter","txt","length","text","handleDelete","i","index","handleDrag","currPos","newPos","newKeywords","slice","splice","placeholder","inputFieldPosition","Fragment","Image","src","concat","constants","path","width","word","index1","onClick","Button","type","size","async","generateImage","error","getImageDescription","postRequest","deleteFile","getRequest","getProjects","getImagesfromPin"],"sourceRoot":""}