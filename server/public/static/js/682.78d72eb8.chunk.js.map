{"version":3,"file":"static/js/682.78d72eb8.chunk.js","mappings":"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","sources":["container/pages/Home/Description.jsx","services/v1API.js"],"sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport _ from \"lodash\";\r\nimport { Button, Col, Image, Layout, Row, Spin, Tag, Typography, Upload } from \"antd\";\r\nimport { CloseCircleTwoTone, FileImageOutlined } from \"@ant-design/icons\";\r\nimport { WithContext as ReactTags } from 'react-tag-input';\r\n\r\nimport { getPlan } from \"../../../redux/auth/authSlice\";\r\nimport constants from \"../../../config/constants\";\r\nimport { getStorage } from \"../../../helpers\";\r\nimport { generateImage, getConceptById, getImageDescription } from \"../../../services/v1API\";\r\n\r\nconst { Content, Sider } = Layout;\r\nconst { Title, Text } = Typography;\r\nconst { Dragger } = Upload;\r\n\r\nconst KeyCodes = {\r\n  comma: 188,\r\n  space: 32,\r\n  enter: 13\r\n};\r\n\r\nconst delimiters = [KeyCodes.comma, KeyCodes.enter, KeyCodes.space];\r\n\r\nfunction Description() {\r\n  // const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  // const plan = useSelector((state) => state.auth.plan);\r\n  const { id } = useParams();\r\n\r\n  const [concept, setConcept] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [keywords, setKeywords] = useState([]);\r\n  const [prevIndex, setPrevIndex] = useState({});\r\n\r\n  useEffect(() => {\r\n    getConceptById(id).then(res => {\r\n      setConcept(res.data.concept);\r\n    }).catch(err => {\r\n      console.log(err);\r\n    });\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   // console.log(id, plan);\r\n  //   // if(!plan && !id) {\r\n  //   //     navigate('/plans');\r\n  //   // }\r\n  // }, [plan]);\r\n\r\n  // const handleChange = (info) => {\r\n  //   setPercent(parseInt(info.file.percent));\r\n  //   if (info.file.status === \"done\") {\r\n  //     setPath(info.file.response?.path);\r\n  //   }\r\n  // };\r\n\r\n  // const handleAdd = (word, index, index1) => {\r\n  //   let tmp = [...keywords];\r\n\r\n  //   if (prevIndex.index == index) {\r\n  //     if ((prevIndex.index1 - index1) == 1) {\r\n  //       let prevWord = tmp.splice(-1, 1);\r\n  //       let newWord = word + ' ' + prevWord;\r\n  //       tmp = [...tmp, newWord];\r\n  //     } else if ((prevIndex.index1 - index1) == -1) {\r\n  //       let prevWord = tmp.splice(-1, 1);\r\n  //       let newWord = prevWord + ' ' + word;\r\n  //       tmp = [...tmp, newWord];\r\n  //     } else if ((prevIndex.index1 - index1) == 0) {\r\n  //     } else {\r\n  //       tmp = [...tmp, word];\r\n  //     }\r\n  //   } else {\r\n  //     tmp = [...tmp, word];\r\n  //   }\r\n  //   setKeywords([...tmp]);\r\n  //   setPrevIndex({ index, index1 });\r\n  // }\r\n\r\n  // const handleDelete = (index) => {\r\n  //   let tmp = [...keywords];\r\n  //   tmp.splice(index, 1);\r\n  //   setKeywords([...tmp]);\r\n  // }\r\n\r\n  const handleRemove = i => {\r\n    setKeywords(keywords.filter((keyword, index) => index !== i));\r\n  };\r\n\r\n  const handleAddition = keyword => {\r\n    setKeywords([...keywords, keyword]);\r\n  };\r\n\r\n  const handleDrag = (keyword, currPos, newPos) => {\r\n    const newKeywords = keywords.slice();\r\n\r\n    newKeywords.splice(currPos, 1);\r\n    newKeywords.splice(newPos, 0, keyword);\r\n\r\n    // re-render\r\n    setKeywords(newKeywords);\r\n  };\r\n\r\n  const handleNext = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // let res = await getImageDescription({\r\n      //   path\r\n      // });\r\n      // console.log(res);\r\n      let res = await generateImage(id, { keywords: keywords.map(keyword => keyword.text).join(\" \") });\r\n      console.log(res);\r\n      navigate(`/result/${id}`);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"text-center max-w-5xl w-screen mx-auto p-2\">\r\n      <Row gutter={[32, 32]} className=\"mt-6\">\r\n        <Col span={24}>\r\n          <Title level={2}>Click to <span className=\"bg-green-200 relative\">select<span className=\"text-lg absolute top-[-15px] right-[-15px]\"><CloseCircleTwoTone twoToneColor=\"red\" /></span></span> the keywords that best describe what you want to create.</Title>\r\n        </Col>\r\n        <Col span={24}>\r\n          {/* <div className=\"border-1 border-solid border-gray-300 bg-gray-100 py-2 px-4 text-left\">\r\n            {(keywords.length == 0) && \"no selected keywords!\"}\r\n            {keywords.map((keyword, index) => <Tag className=\"my-1 relative group/item\" key={index}>{keyword} <span className=\"absolute -top-2 -right-2 cursor-pointer group-hover/item:inline hidden\" onClick={() => { handleDelete(index) }}><CloseCircleTwoTone twoToneColor=\"#F00\" /></span></Tag>)}\r\n          </div> */}\r\n          <div className=\"border-1 border-solid border-gray-200 rounded p-2 text-left\">\r\n            <ReactTags\r\n              tags={keywords}\r\n              suggestions={_.uniq(concept.inputImages?.map((item) => item.desc).join(\" \").split(\" \")).filter(txt => txt.length > 2).map(txt => ({ id: txt, text: txt }))}\r\n              delimiters={delimiters}\r\n              handleDelete={handleRemove}\r\n              handleAddition={handleAddition}\r\n              handleDrag={handleDrag}\r\n              // handleTagClick={handleTagClick}\r\n              placeholder=\"Please input prompt\"\r\n              inputFieldPosition=\"inline\"\r\n              // autocomplete\r\n            />\r\n          </div>\r\n        </Col>\r\n        {concept.inputImages?.map((data, index) => <Fragment key={index}>\r\n          <Col span={6}>\r\n            <Image src={`${constants.SOCKET_URL}${data.path}`} width={'100%'} />\r\n          </Col>\r\n          <Col span={18}>\r\n            <p className=\"break-words text-lg text-left\">\r\n              {data.desc.split(\" \").map((word, index1) => <span className=\"group/item mr-1 hover:bg-green-200 cursor-pointer relative\" key={`desc_${index}_${index1}`} onClick={() => handleAddition(word, index, index1)}>{word}\r\n                {/* <span className=\"absolute top-[-15px] right-[-15px] z-[-10] group-hover/item:z-auto\" onClick={() => {\r\n                  alert(\"Hello\")\r\n                }}><CloseCircleTwoTone twoToneColor=\"red\" /></span> */}\r\n              </span>)}\r\n            </p>\r\n          </Col>\r\n        </Fragment>)}\r\n        <Col span={24}>\r\n          <div className=\"text-center\">\r\n            <Button type=\"primary\" size=\"large\" onClick={handleNext} loading={loading}>Next step</Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Description;\r\n","import { getRequest, postRequest } from \"./axiosClient\";\r\n\r\nexport const getImageDescription = (data) => postRequest('v1/getImageDescription', data);\r\nexport const deleteFile = (data) => postRequest('v1/deleteFile', data);\r\nexport const getConceptById = (id, data) => getRequest(`v1/getConceptById/${id}`, data);\r\nexport const generateImage = (id, data) => postRequest(`v1/generateImage/${id}`, data);\r\nexport const getProjects = (data) => getRequest(`v1/getProjects`, data);"],"names":["Title","Layout","Typography","delimiters","Upload","_concept$inputImages","_concept$inputImages2","navigate","useNavigate","id","useParams","_useState","useState","_useState2","_slicedToArray","concept","setConcept","_useState3","_useState4","loading","setLoading","_useState5","_useState6","keywords","setKeywords","_useState7","_useState8","useEffect","getConceptById","then","res","data","catch","err","console","log","handleAddition","keyword","concat","_toConsumableArray","handleNext","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","generateImage","map","text","join","sent","t0","stop","apply","arguments","_jsx","className","children","_jsxs","Row","gutter","Col","span","level","CloseCircleTwoTone","twoToneColor","ReactTags","tags","suggestions","_","inputImages","item","desc","split","filter","txt","length","handleDelete","i","index","handleDrag","currPos","newPos","newKeywords","slice","splice","placeholder","inputFieldPosition","Fragment","Image","src","constants","path","width","word","index1","onClick","Button","type","size","getImageDescription","postRequest","deleteFile","getRequest","getProjects"],"sourceRoot":""}